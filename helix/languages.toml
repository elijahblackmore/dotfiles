[language-server.ruff]
command = "ruff"
args = ["server", "--preview"]

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]

[[language]]
name = "python"
language-servers = ["ruff", "pyright"]
auto-format = true

[language-server.biome]
command = "biome"
args = ["lsp-proxy"]

[language-server.deno]
command = "deno"
args = ["lsp"]

[language-server.emmet-language-server]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.rust-analyzer.config]
check = { command = "clippy", extraArgs = [
  "--",
  "-W",
  "clippy::pedantic",
  "-W",
  "clippy::style",
] }

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }
auto-format = true

[[language]]
name = "rust"
formatter = { command = "rustfmt" }
auto-format = true

[[language]]
name = "jsx"
language-servers = [
  "biome",
  { name = "typescript-language-server", except-features = [
    "format",
  ] }, # `except-features` might be unnecessary here as the `formatter` key takes precedence over the LSP.
  "tailwindcss-ls",
  "emmet-language-server",
]
# I would like to switch to this formatter once Tailwind CSS class sorting works: https://github.com/biomejs/biome/issues/1274.
# formatter = { command = "biome", args = [
#   "format",
#   "--stdin-file-path",
#   "file.jsx",
# ] }
formatter = { command = "prettier", args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [
  "biome",
  { name = "typescript-language-server", except-features = [
    "format",
  ] }, # `except-features` might be unnecessary here as the `formatter` key takes precedence over the LSP.
  "tailwindcss-ls",
  "emmet-language-server",
]
formatter = { command = "prettier", args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "biome",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "file.ts",
] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [
  { name = "typescript-language-server", except-features = [
    "format",
  ] },
  "biome",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "file.js",
] }
auto-format = true

[[language]]
name = "json"
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
  "biome",
]
formatter = { command = "biome", args = [
  "format",
  "--stdin-file-path",
  "file.json",
] }
auto-format = true

[[language]]
name = "markdown"
language-servers = ["deno", "ltex-ls"]
# formatter = {  command = "deno", args = ["fmt", "-", "â€”ext", "md"] }
auto-format = true

[[language]]
name = "css"
formatter = { command = "prettier", args = ["--parser", "css"] }

[[language]]
name = "yaml"
auto-format = true
formatter = { command = "yamlfmt", args = ["-"] }

[[language]]
name = "c"
# scope = "source.keymap"
file-types = ["keymap"]
indent = { tab-width = 2, unit = " " }

[[language]]
name = "bash"
indent = { tab-width = 2, unit = ' ' }
file-types = [
  "conf",
] # This is just for some form of syntax highlighting inside .conf configuration files
